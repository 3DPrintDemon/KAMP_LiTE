[gcode_macro VZ_Purge]
description:

variable_adaptive_purging_enable: False
variable_tip_distance: 0
variable_y_distance_to_object: 0
variable_flow_rate: 0
variable_purge_amount: 0

gcode:

    {% if display_parameters == True %}
      { action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }
      { action_respond_info("z_height        : %f" % (z_height))  }
      { action_respond_info("purge_amount    : %f" % (purge_amount))  }
      { action_respond_info("line_length     : %f" % (line_length))  }
      { action_respond_info("flow_rate       : %f" % (flow_rate))  }
      { action_respond_info("x_default       : %f" % (x_default))  }
      { action_respond_info("y_default       : %f" % (y_default))  }
      { action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }
    {% endif %}

    {% if adaptive_enable == True %}
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
        {% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}     # Get smallest X value from polygonal map, if none found use x_default
        {% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}     # Get smallest Y value from polygonal map, if none found use y_default
        {% set x_origin = ([x_origin, 0] | max) %}                                          # Combine smallest X value
        {% set y_origin = ([y_origin, 0] | max) %}
    {% else %}
        {% set x_origin = x_default | float %}
        {% set y_origin = y_default | float %}
    {% endif %}
    {% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}
    {% set cross_section = nozzle_dia * z_height | float %}
    {% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}

    G92 E0                                                                              # Reset extruder
    G0 F{travel_speed}                                                                  # Set travel speed
    G90                                                                                 # Absolute positioning
    G0 X{x_origin} Y{y_origin - distance_to_object_y}                                   # Move to purge position
    G0 Z{z_height}                                                                      # Move to purge Z height
    M83                                                                                 # Relative extrusion mode
    G1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}                    # Purge line
    G1 E-.5 F2100                                                                       # Retract
    G92 E0                                                                              # Reset extruder distance
    M82                                                                                 # Absolute extrusion mode
    G0 Z{z_height * 2} F{travel_speed}                                                  # Z hop


####################################################################

    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}                                  # Set default bed mesh minimum coords from printer.cfg, mesh_min[0],mesh_min[1], [0] is X, [1] is Y
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}                                  # Set default bed mesh maximum coords from printer.cfg, mesh_max[0],mesh_max[1], [0] is X, [1] is Y
    {% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}                                # Set default bed mesh probe count from printer.cfg. probe_count[0] is X axis, probe_count[1] is Y axis
    {% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}                     # Checks if probe count's value has [0] AND [1] defined, if only [0] is defined, multiply [0] by 2
    {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}    # X max probe distance, mesh_maxX - mesh_minX / probe_count for X - 1
    {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}    # Y max probe distance, mesh_maxY - mesh_minY / probe_cound for Y - 1
    {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}                        # set x_min to be the smallest value found for X when checking object locations, else use default mesh min
    {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}                        # set y_min to be the smallest value found for Y when checking object locations, else use default mesh min
    {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}                        # set x_max to be the largest value found for X when checking object locations, else use default mesh max
    {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}                        # set y_max to be the largest value found for Y when checking object locations, else use default mesh max

      {% if margin_enable == False %}                                                                       
        {% set margin_size = 0 %}                                                                           # if margin_enable = false, set the margin size to 0
    {% endif %}
    
    { action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(
        all_points | count,
        bed_mesh_min,
        bed_mesh_max,
    )) }

    {% if fuzz_enable == True %}
        {% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}
        {% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}
        {% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}
        {% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}
        {% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}
    {% else %}
        {% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}                                    # set x_min to be the highest number from printer.cfg's mesh_min_x VS object-based x_min - margin
        {% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}                                    # set y_min to be the highest number from printer.cfg's mesh_min_y VS object-based y_min - margin
        {% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}                                    # set x_max to be the highest number from printer.cfg's mesh_max_x VS object-based x_max + margin
        {% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}                                    # set y_max to be the highest number from printer.cfg's mesh_max_y VS object-based y_max + margin
    {% endif %}

        { action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(
        (x_min, y_min),
        (x_max, y_max),
    )) }

    {% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
    {% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}

    {% if (([points_x, points_y]|max) > 6) %}
        {% set algorithm = "bicubic" %}
        {% set min_points = 4 %}
    {% else %}
        {% set algorithm = "lagrange" %}
        {% set min_points = 3 %}
    {% endif %}
    { action_respond_info( "Algorithm: {}".format(algorithm)) }

    {% set points_x = [points_x, min_points]|max  %}
    {% set points_y = [points_y, min_points]|max  %}
    { action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }

    {% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}
        {% set ref_index = (points_x * points_y / 2) | int %}
        { action_respond_info( "Reference index: {}".format(ref_index) ) }
    {% else %}
        {% set ref_index = -1 %}
    {% endif %}

    {% if probe_dock_enable == True %}
        {attach_macro}              # Attach/deploy a probe if the probe is stored somewhere outside of the print area
    {% endif %}

    {% if led_enable == True %}
        {status_macro}              # Set status LEDs
    {% endif %}

    _BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}

    {% if probe_dock_enable == True %}
        {detach_macro}              # Detach/stow a probe if the probe is stored somewhere outside of the print area
    {% endif %}