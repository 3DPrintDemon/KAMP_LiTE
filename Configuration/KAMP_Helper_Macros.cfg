[gcode_macro _KAMP_Get_Adaptive_Origin]
description: HELPER - Gets the min x and y of the defined object(s) as a single point
gcode:

    # Get XY min point from object bounds
    {% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}
    {% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}
    {% set x_origin = ([x_origin, 0] | max) %}
    {% set y_origin = ([y_origin, 0] | max) %}

    { action_respond_info("Adaptive origin found at [{!r}, {!r}]".format(
        x_origin,
        y_origin,
    )) }

[gcode_macro _KAMP_Get_Adaptive_Area]
description: HELPER - Gets the min and max x and y of the defined object(s) area as a square
gcode:

    # Get XY min/max area from object bounds
    {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
    {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
    {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
    {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}

    { action_respond_info("Adaptive area found at min:[{!r}] max:[{!r}]".format(
        (x_min,y_min),
        (x_max,y_max),
    )) }

[gcode_macro _KAMP_Get_Printer_Params]
description: HELPER - Gets any params KAMP requires from the printer object
gcode:

    # Limit Information
    {% set x_axis_max = printer.configfile.config.stepper_x.position_max %}
    {% set y_axis_max = printer.configfile.config.stepper_y.position_max %}

    # Movement Information
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}

[gcode_macro _KAMP_Mesh_Params]
description: HELPER - Gets any params KAMP requires specifically for adaptive meshing
gcode:

    # Mesh Limits
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}

    # Probe count do-si-do in case a single number defines [bed_mesh] probe_count
    {% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
    {% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}

[gcode_macro _KAMP_Purge_Params]
description: HELPER - Gets any params KAMP requires for purging and calculates purge variables
gcode:

    # Get location params (x_min, x_max, y_min) from objects.
    {% set x_min = all_points | map(attribute=0) | min %}
    {% set x_max = all_points | map(attribute=0) | max %}
    {% set y_min = all_points | map(attribute=1) | min %}  

    # Get nozzle diameter from printer.cfg.
    {% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}

    # Convert nozzle diameter into suitable purge line width.
    {% set line_width = nozzle_dia * 1.5 | float %}

    # Set purge Z height to be 75% of calculated line width.
    {% set z_height = line_width * 0.75 | float %}

    # Calculate purge speed from flow rate, line width, and nozzle height.
    {% set purge_speed = (flow_rate / nozzle_dia / z_height) * 60 | float %}

    # Get purge area from params.


    # Output information about purge to console.
    { action_respond_info("Purging at Y{} from X{} to X{}...".format(
        y_purge_origin,
        x_purge_origin,
        x_purge_dest,
    )) }

    G0 X{x_purge_origin} Y{y_purge_origin} F{travel_speed}
    G0 Z{z_height}
    G1 X{x_purge_dest} E{purge_amount} F{purge_speed}

    # flow rate calculated like this: {requested_flow} / {nozzle_diameter} / {z_height}


[gcode_macro _KAMP_Get_Delta_Params]
description: HELPER - Gets the origin and radius values for adaptive meshing with delta printers
gcode:

    # Get all defined object points.
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
 
    # Get XY min/max area from object bounds.
    {% set x_min = all_points | map(attribute=0) | min %}
    {% set y_min = all_points | map(attribute=1) | min %}
    {% set x_max = all_points | map(attribute=0) | max %}
    {% set y_max = all_points | map(attribute=1) | max %}

    # Convert bounding box to center point (round mesh origin).
    {% set x_origin = (x_max + x_min) / 2 %}
    {% set y_origin = (y_max + y_min) / 2 %}

    # Get XY origin point and radius from [bed_mesh] configuration.
    {% set default_delta_origin_x = printer.configfile.settings.bed_mesh.mesh_origin[0] %}
    {% set default_delta_origin_y = printer.configfile.settings.bed_mesh.mesh_origin[1] %}
    {% set default_delta_radius = printer.configfile.settings.bed_mesh.mesh_radius %}
    
    # Calculate radius values to object points from mesh_origin and pick the largest one.
    {% set distance = 0 %}
    {% set ns = namespace(max_distance=0) %}  
    {% for point in all_points %}
        {% set distance = ((point[0]-x_origin) ** 2 + (point[1]-y_origin) ** 2) ** 0.5 %}
        {% set ns.max_distance = [ns.max_distance, distance] | max %}
    {% endfor %}

    # If calculated radius is smaller than default mesh_radius, use calculated radius. If not, use default.
    {% if ns.max_distance < default_delta_radius %}
        {% set delta_radius = ns.max_distance %}
    {% else %}
        {% set delta_radius = default_delta_radius %}
        {% set x_origin = default_delta_origin_x %}
        {% set y_origin = default_delta_origin_y %}
    {% endif %}

    # Send calculated values to Adaptive Mesh macro.
    # SET_GCODE_VARIABLE MACRO=Adaptive_Mesh VARIABLE=delta_origin VALUE={[x_origin, y_origin]}
    # SET_GCODE_VARIABLE MACRO=Adaptive_Mesh VARIABLE=delta_radius VALUE={delta_radius}

    { action_respond_info("Origin found at [{!r}], radius calculated is {}".format(
        (x_origin, y_origin),
        delta_radius,
    )) }

[gcode_macro _Build_Purge]
description: HELPER - Macro that gets and build params and sends them to the purge macro.
gcode:
    
    {% if printer["gcode_macro KAMP_Settings"].adaptive_purging_enable == True %}

        {% set tip_distance = printer["gcode_macro KAMP_Settings"].tip_distance | float %}
        {% set y_distance_to_object = printer["gcode_macro KAMP_Settings"].y_distance_to_object | float %}
        {% set flow_rate = printer["gcode_macro KAMP_Settings"].flow_rate | float %}
        {% set purge_amount = printer["gcode_macro KAMP_Settings"].purge_amount | float %}

        {% if printer["gcode_macro Voron_Purge"] is defined %}

            SET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=tip_distance VALUE={tip_distance}
            SET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=y_distance_to_object VALUE={y_distance_to_object}
            SET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=flow_rate VALUE={flow_rate}
            SET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=purge_amount VALUE={purge_amount}
        
        {% endif %}

        {% if printer["gcode_macro Line_Purge"] is defined %}

            SET_GCODE_VARIABLE MACRO=LINE_PURGE VARIABLE=tip_distance VALUE={tip_distance}
            SET_GCODE_VARIABLE MACRO=LINE_PURGE VARIABLE=y_distance_to_object VALUE={y_distance_to_object}
            SET_GCODE_VARIABLE MACRO=LINE_PURGE VARIABLE=flow_rate VALUE={flow_rate}
            SET_GCODE_VARIABLE MACRO=LINE_PURGE VARIABLE=purge_amount VALUE={purge_amount}
        
        {% endif %}

        {% if printer["gcode_macro VZ_Purge"] is defined %}

            SET_GCODE_VARIABLE MACRO=VZ_PURGE VARIABLE=tip_distance VALUE={tip_distance}
            SET_GCODE_VARIABLE MACRO=VZ_PURGE VARIABLE=y_distance_to_object VALUE={y_distance_to_object}
            SET_GCODE_VARIABLE MACRO=VZ_PURGE VARIABLE=flow_rate VALUE={flow_rate}
            SET_GCODE_VARIABLE MACRO=VZ_PURGE VARIABLE=purge_amount VALUE={purge_amount}

        {% endif %}

        SET_GCODE_VARIABLE MACRO=POO_PURGE VARIABLE=tip_distance VALUE={tip_distance}
        SET_GCODE_VARIABLE MACRO=POO_PURGE VARIABLE=y_distance_to_object VALUE={y_distance_to_object}
        SET_GCODE_VARIABLE MACRO=POO_PURGE VARIABLE=flow_rate VALUE={flow_rate}
        SET_GCODE_VARIABLE MACRO=POO_PURGE VARIABLE=purge_amount VALUE={purge_amount}

    {% endif %}

[gcode_macro _KAMP_Purge_Params_NEW]
description: KAMP_Settings -> _KAMP_Purge_Params -> _Build_Purge
gcode:
    # Collect all points defined by objects
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    # Set min/max points for each axis from object bounds
    {% set purge_x_min = all_points | map(attribute=0) | min | default(0) %}
    {% set purge_x_max = all_points | map(attribute=0) | max | default(0) %}
    {% set purge_y_min = all_points | map(attribute=1) | min | default(0) %}
    {% set purge_y_max = all_points | map(attribute=1) | max | default(0) %}

    # Tip distance, y distance to object, flow rate, purge amount

    {% set purge_move_speed = 2.31 * size * flow_rate / (purge_amount * 2.405) %}
    {% set prepurge_speed = flow_rate / 2.405 %}

    SET_GCODE_VARIABLE MACRO=_Build_Purge VARIABLE=purge_x_min VALUE={purge_x_min}
    SET_GCODE_VARIABLE MACRO=_Build_Purge VARIABLE=purge_x_max VALUE={purge_x_max}
    SET_GCODE_VARIABLE MACRO=_Build_Purge VARIABLE=purge_y_min VALUE={purge_y_min}
    SET_GCODE_VARIABLE MACRO=_Build_Purge VARIABLE=purge_y_max VALUE={purge_y_max}
