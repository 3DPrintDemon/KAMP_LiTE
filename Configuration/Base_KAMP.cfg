[delayed_gcode _Base_KAMP]
initial_duration: 1.0
gcode:

    # Check for KAMP_Settings macro and define values at restart. If no macro found, warn user.
    {% if printer["gcode_macro KAMP_Settings"] is defined %}
        # Check if adaptive_meshing is enabled and set True.
        {% if printer["gcode_macro KAMP_Settings"].adaptive_meshing_enable == True %}
            # Set adaptive_meshing variable in BED_MESH_CALIBRATE to True.
            {% set adaptive_meshing_enable = printer["gcode_macro KAMP_Settings"].adaptive_meshing_enable | abs %}
            SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=adaptive_meshing_enable VALUE={adaptive_meshing_enable}
            # Set mesh_margin by what is defined in KAMP_Settings.
            {% set mesh_margin = printer["gcode_macro KAMP_Settings"].mesh_margin | float %}
            SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=mesh_margin VALUE={mesh_margin}
        # End of check.
        {% endif %}
        # Check if fuzz_amount is greater than 0. This allows users to fuzz points without adaptive meshing if they wish.
        {% if printer["gcode_macro KAMP_Settings"].fuzz_amount > 0 %}
            # Set fuzz_amount variable in BED_MESH_CALIBRATE.
            {% set fuzz_amount = printer["gcode_macro KAMP_Settings"].fuzz_amount | float %}
            SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_amount VALUE={fuzz_amount}
        # End of check.
        {% endif %}
        # Check if probe_dock_enable is True. Loads attach/dock commands on restart so running a mesh standalone will still call dockable probe macros.
        {% if printer["gcode_macro KAMP_Settings"].probe_dock_enable == True %}
            # Set attach_macro name in BED_MESH_CALIBRATE.
            {% set attach_macro = printer["gcode_macro KAMP_Settings"].attach_macro | string %}
            SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE={attach_macro}
            # Set detach_macro name in BED_MESH_CALIBRATE
            {% set detach_macro = printer["gcode_macro KAMP_Settings"].detach_macro | string %}
            SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE={detach_macro}
        # End of check.
        {% endif %}
        # Check if adaptive purging is enabled.
        {% if printer["gcode_macro _KAMP_Purge_Params"] is defined %}
            # Set variables specific for adaptive purging.
            {% set tip_distance = printer["gcode_macro KAMP_Settings"].tip_distance | float %}
            SET_GCODE_VARIABLE MACRO=_KAMP_Purge_Params VARIABLE=tip_distance VALUE={tip_distance}
            {% set y_distance_to_object = printer["gcode_macro KAMP_Settings"].y_distance_to_object | float %}
            SET_GCODE_VARIABLE MACRO=_KAMP_Purge_Params VARIABLE=y_distance_to_object VALUE={y_distance_to_object}
            {% set flow_rate = printer["gcode_macro KAMP_Settings"].flow_rate | float %}
            SET_GCODE_VARIABLE MACRO=_KAMP_Purge_Params VARIABLE=flow_rate VALUE={flow_rate}
            {% set purge_amount = printer["gcode_macro KAMP_Settings"].purge_amount | float %}
            SET_GCODE_VARIABLE MACRO=_KAMP_Purge_Params VARIABLE=purge_amount VALUE={purge_amount}
        # End of check.
        {% endif %}
    #  If no KAMP_Settings macro found, warn user.
    {% else %}
        # No KAMP_Settings macro found, warn user.
        {action_respond_info("WARNING: No KAMP_Settings macro found! Did you forget to add it to your config?")}
    # End of setup delayed_gcode.
    {% endif %}

[gcode_macro helper1]
description:
gcode:
[gcode_macro helper2]
description:
gcode: