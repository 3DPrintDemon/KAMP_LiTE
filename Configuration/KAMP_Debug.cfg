[gcode_macro _KAMP_Debug_Object]
description: This macro will generate an object called "Debug" in the center of your bed for testing KAMP
variable_obj_size: 20
gcode:
    {% set obj_center_x = printer.toolhead.axis_maximum.x / 2 | float %}
    {% set obj_center_y = printer.toolhead.axis_maximum.y / 2 | float %}
    EXCLUDE_OBJECT_DEFINE NAME=Debug CENTER={obj_center_x},{obj_center_y} POLYGON=[[{obj_center_x - (obj_size / 2)},{obj_center_y - (obj_size / 2)}],[{obj_center_x + (obj_size / 2)},{obj_center_y + (obj_size / 2)}]]
    { action_respond_info("Generated a {}x{}mm debug object at {!r}, ready to test.".format(
        (obj_size),
        (obj_size),
        (obj_center_x, obj_center_y),
    )) }

[gcode_macro _KAMP_Cleanup]
description: This macro will clear all objects from the bed
gcode:
    EXCLUDE_OBJECT_DEFINE RESET=1
    {action_respond_info("All objects cleared.")}

[gcode_macro _KAMP_Set]
description:
gcode:

    {% if params.MESH_MARGIN|lower %}
        {% set MESH_MARGIN = params.MESH_MARGIN|lower %}
        SET_GCODE_VARIABLE MACRO=_KAMP_Settings VARIABLE=mesh_margin VALUE={MESH_MARGIN}
        {action_respond_info("Mesh margin set to {}.".format(MESH_MARGIN))}
    {% endif %}

    {% if params.FUZZ|lower %}
        {% set FUZZ = params.FUZZ|lower %}
        SET_GCODE_VARIABLE MACRO=_KAMP_Settings VARIABLE=fuzz_amount VALUE={FUZZ}
        {action_respond_info("Fuzz amount set to {}.".format(FUZZ))}
    {% endif %}

    {% if params.TIP_DIST|lower %}
        {% set TIP_DIST = params.TIP_DIST|lower %}
        SET_GCODE_VARIABLE MACRO=_KAMP_Settings VARIABLE=tip_distance VALUE={TIP_DIST}
        {action_respond_info("Tip distance set to {}.".format(TIP_DIST))}
    {% endif %}

    {% if params.FLOW|lower %}
        {% set FLOW = params.FLOW|lower %}
        SET_GCODE_VARIABLE MACRO=_KAMP_Settings VARIABLE=flow_rate VALUE={FLOW}
        {action_respond_info("Purging flow rate set to {}.".format(FLOW))}
    {% endif %}

    {% if params.PURGE_MARGIN|lower %}
        {% set PURGE_MARGIN = params.PURGE_MARGIN|lower %}
        SET_GCODE_VARIABLE MACRO=_KAMP_Settings VARIABLE=purge_margin VALUE={PURGE_MARGIN}
        {action_respond_info("Purge margin set to {}.".format(PURGE_MARGIN))}
    {% endif %}

    {% if params.PURGE_AMOUNT|lower %}
        {% set PURGE_AMOUNT = params.PURGE_AMOUNT|lower %}
        SET_GCODE_VARIABLE MACRO=_KAMP_Settings VARIABLE=purge_amount VALUE={PURGE_AMOUNT}
        {action_respond_info("Purge amount set to {}.".format(PURGE_AMOUNT))}
    {% endif %}

    {% if params.PURGE_HEIGHT|lower %}
        {% set PURGE_HEIGHT = params.PURGE_HEIGHT|lower %}
        SET_GCODE_VARIABLE MACRO=_KAMP_Settings VARIABLE=purge_height VALUE={PURGE_HEIGHT}
        {action_respond_info("Purge height set to {}.".format(PURGE_HEIGHT))}
    {% endif %} 

[gcode_macro _KAMP_CALCULATE]
gcode:

    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}                                # Gather all object points
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}                                                          # Get bed mesh min from printer.cfg
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}                                                          # Get bed mesh max from printer.cfg
    {% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}                                                        # Get probe count from printer.cfg
    {% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}                                           # Pull verbose setting from _KAMP_Settings
    {% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}                                               # Pull mesh margin setting from _KAMP_Settings
    {% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}                                               # Pull fuzz amount setting from _KAMP_Settings
    {% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}                                             # If probe count is only a single number, convert it to 2. E.g. probe_count:7 = 7,7
    {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}                            # Determine max probe point distance
    {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}                            # Determine max probe point distance
    {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}                                                # Set x_min from smallest object x point
    {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}                                                # Set y_min from smallest object y point
    {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}                                                # Set x_max from largest object x point
    {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}                                                # Set y_max from largest object y point

    {% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}                                                          # Set fuzz_range between 0 and fuzz_amount
    {% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}            # Adapt x_min to margin and fuzz constraints
    {% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}            # Adapt y_min to margin and fuzz constraints
    {% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}            # Adapt x_max to margin and fuzz constraints
    {% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}            # Adapt y_max to margin and fuzz constraints

    {% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}          # Define probe_count's x point count and round up
    {% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}          # Define probe_count's y point count and round up

    {% if (([points_x, points_y]|max) > 6) %}                                                                                       # 
        {% set algorithm = "bicubic" %}                                                                                             # 
        {% set min_points = 4 %}                                                                                                    # 
    {% else %}                                                                                                                      # Calculate if algorithm should be bicubic or lagrange
        {% set algorithm = "lagrange" %}                                                                                            # 
        {% set min_points = 3 %}                                                                                                    # 
    {% endif %}                                                                                                                     # 

    {% set points_x = [points_x, min_points]|max %}                                                                                 # Set probe_count's x points to fit the calculated algorithm
    {% set points_y = [points_y, min_points]|max %}                                                                                 # Set probe_count's y points to fit the calculated algorithm
    {% set points_x = [points_x, probe_count[0]]|min %}
    {% set points_y = [points_y, probe_count[1]]|min %}

    {% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}                                               #
        {% set ref_index = (points_x * points_y / 2) | int %}                                                                       #
    {% else %}                                                                                                                      # Set reference index to be point closest to adapted mesh center point if defined
        {% set ref_index = -1 %}                                                                                                    #
    {% endif %}                                                                                                                     #

    {% if verbose_enable == True %}                                                                                                 # If verbose is enabled, print information about KAMP's calculations

        { action_respond_info( "Algorithm: {}.".format(                                                                              
            (algorithm),                                                                                                            
        )) }

        { action_respond_info("Default probe count: {},{}.".format(                                                                  
            (probe_count[0]),                                                                                                       
            (probe_count[1]),                                                                                                       
        )) }

        { action_respond_info("Max probe point distance: X:{} Y:{}.".format(                                                                  
            (max_probe_point_distance_x),                                                                                                             
            (max_probe_point_distance_y),                                                                                                             
        )) }

        { action_respond_info("Adapted probe count: {},{}.".format(                                                                  
            (points_x),                                                                                                             
            (points_y),                                                                                                             
        )) }

        {% if ref_index != -1 %}                                                                                                    
            { action_respond_info( "Reference index adjusted to: {}.".format(ref_index) ) }                                          
        {% else %}                                                                                                                  
            { action_respond_info( "Reference index: None." ) }                                                                      
        {% endif %}                                                                                                                 

        {action_respond_info("Default mesh bounds: {}, {}.".format(                                                                  
            (bed_mesh_min[0],bed_mesh_min[1]),                                                                                      
            (bed_mesh_max[0],bed_mesh_max[1]),                                                                                      
        )) }

        {% if mesh_margin > 0 %}                                                                                                    
            {action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(                                       
                (mesh_margin),                                                                                                      
                (mesh_margin),                                                                                       
            )) }                                                                                                                    
        {% else %}                                                                                                                  
            {action_respond_info("Mesh margin is 0, margin not increased.")}                                                        
        {% endif %}                                                                                                                 

        {% if fuzz_amount > 0 %}                                                                                                    
            {action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(                                     
                (fuzz_amount),                                                                                                      
            )) }                                                                                                                    
        {% else %}                                                                                                                  
            {action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}                                                      
        {% endif %}                                                                                                                 

        { action_respond_info("Adapted mesh bounds: {}, {}.".format(                                                                 
            (adapted_x_min, adapted_y_min),                                                                                         
            (adapted_x_max, adapted_y_max),                                                                                         
        )) }

        {action_respond_info("KAMP adjustments successful. Happy KAMPing!")}

    {% endif %}                                                                                                                     # End of verbose
